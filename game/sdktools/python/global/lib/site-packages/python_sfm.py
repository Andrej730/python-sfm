# encoding: utf-8

import os
import pydoc
import inspect

import PySide
import vs
import sfm
import sfmApp

class SFMElement(object):
    def __init__(self, element):
        self._original = element

    @property
    def name(self):
        return self._original.GetName()

    @property
    def attributes(self):
        return list_attrs(self._original)

    @property
    def attributes_dict(self):
        attributes = self.attributes
        return {a.name: a for a in attributes}

class SFMShot:
    def __init__(self):
        self._original = sfm.GetCurrentShot()
        self.animsets = [SFMAnimationSet(animset) for animset in self._original.animationSets]

    # not useful
    @property   
    def attributes(self):
        return list_attrs(self._original)


class SFMAnimationSet:
    def __init__(self, animset):
        self._original = animset

    def find_control_by_name(self, control_name):
        control = self._original.FindControl(control_name.encode('utf-8'))

        if control:
            control = SFMControl(control)

        return control

    @property
    def name(self):
        return self._original.name.GetValue()

    @property
    def game_model(self):
        return SFMGameModel(self._original.gameModel)

    @property   
    def attributes(self):
        return list_attrs(self._original)

class SFMControl(SFMElement):
    @property
    def channels(self):
        if self._original.GetTypeString()=='DmElement':
            if self._original.HasAttribute("rightvaluechannel"):
                channels = self._original.rightvaluechannel, \
                    self._original.leftvaluechannel
            else:
                channels = self._original.channel,None
            
        elif self._original.GetTypeString()=='DmeTransformControl':
            channels = self._original.positionChannel, \
                self._original.orientationChannel

        return [SFMChannel(channel) if channel else None for channel in channels]

    def copy_logs_to_control(self, to_control):
        if not isinstance(to_control, SFMControl):
            raise Exception(str(to_control) + ' is not SFMControl type.')

        channels = zip(self.channels, to_control.channels)

        for from_channel, to_channel in channels:
            if not from_channel or not to_channel:
                continue

            to_channel.values = from_channel.values
            to_channel.times = from_channel.times

class SFMChannel(SFMElement):
    @property
    def values(self):
        return list(self._original.log.GetLayer(0).values)

    @values.setter
    def values(self, values):
        values = list(values) 
        log_values = self._original.log.GetLayer(0).values

        try:
            log_values.clear()        
        except AttributeError:
            # for example, floatarray doesnt have clear method
            for i in range(log_values.Count()):
                del log_values[0]

        for value in values:
            log_values.append(value)

    @property
    def times(self):
        # actual times is CDnAttrubuteType, GetTypeString() = 'time_array'
        # has functions: count, insert, append, clear

        return list(self._original.log.GetLayer(0).times)

    @times.setter
    def times(self, times):

        # print(times)
        # log_times = self._original.log.GetLayer(0).times 
        # print log_times.count()
        # self._original.log.GetLayer(0).times.clear()
        # print log_times.count()
        # print log_times.insert(1, vs.DmeTime_t(5.0))
        # # times = list(times)

        # sfm.SetOperationMode("Record") 
        # self._original.log.GetLayer(0).times.clear()
        log_times = self._original.log.GetLayer(0).times 
        log_times.clear()

        for value in times:
            log_times.append(value)

        # sfm.SetOperationMode("Pass")

class SFMGameModel(SFMElement):
    def __init__(self, gamemodel):
        self._original = gamemodel

    @property
    def override_materials(self):
        try:
            self._original.materials
            return True
        except AttributeError:
            return False

    @property
    def materials(self):
        try:
            return [SFMMaterial(mat) for mat in self._original.materials]
        except AttributeError:
            return None

    # not useful
    @property   
    def attributes(self):
        return list_attrs(self._original)

class SFMMaterial:
    def __init__(self, material):
        self._original = material

    @property
    def name(self):
        return self._original.GetValue('name')

    @property   
    def attributes(self):
        return list_attrs(self._original)

    def copy_attributes_to_material(self, material):
        if not isinstance(material, SFMMaterial):
            raise Exception(str(material) + ' is not SFMMaterial type.')
        if not isinstance(material._original, vs.movieobjects.CDmeMaterial):
            raise Exception('SFMMaterial._original is not CDmeMaterial instance.')

        self._original.CopyAttributesTo(material._original)

class SFMAttribute(object):
    def __init__(self, attribute):
        self._original = attribute

    @property
    def name(self):
        return self._original.GetName()

    @property
    def value(self):
        return self._original.GetValue()

    @value.setter
    def value(self, v):
        return self._original.SetValue(v)

class SFMElementHandle:
    def __init__(self, element_handle):
        self._original = element_handle
        element = vs.g_pDataModel.GetElement(element_handle)
        self.element = SFMElement(element)

    def get_next(self):
        return vs.g_pDataModel.NextAllocatedElement(self._original)

def list_attrs(o):
    current_attribute = o.FirstAttribute()
    attributes = []
    while current_attribute is not None:
        attributes.append(SFMAttribute(current_attribute))
        current_attribute = current_attribute.NextAttribute()
    return attributes

def getActiveControlsList():
    animset = sfm.GetCurrentAnimationSet()
    c = sfmApp.GetDocumentRoot().settings.graphEditorState.activeControlList
    return c

def getAnimationSetByName(name):
    shot = sfm.GetCurrentShot()

    for animset in shot.animationSets:
        if animset.name.GetValue() == name:
            return SFMAnimationSet(animset)

def getMaterialByName(name, animset = None):
    if not animset:
        animset = sfm.GetCurrentAnimationSet()

    for material in animset.gameModel.materials:
        if material.GetValue('name') == name:
            return SFMMaterial

def save_sfm_elements():
    element_handle = vs.g_pDataModel.FirstAllocatedElement()
    fo = open('list_of_elements.txt', 'w')
    while True:
        eh = python_sfm.SFMElementHandle(element_handle)
        el = eh.element

        print el == None
        try:
            fo.write(el.name + '\n')
        except AttributeError:
            break

        element_handle = eh.get_next()

    fo.close()

def docs_save_object(o):
    # What i've tried to get hidden attributes that didn't worked:
    # inspect.getmembers, o.__dict__

    if inspect.ismodule(o):
        name = o.__name__
    else:
        name = type(o).__name__

    f = open('help/docs/' + name + '.txt', 'w')
    s = pydoc.plain(pydoc.render_doc(o))
    f.write(s)
    f.close()

    f = open('help/dir/' + name + '.txt', 'w')
    for line in sorted(dir(o)):
        f.write(str(line) + '\n')
    f.close()

    try:
        attributes = list_attrs(o)
        f = open('help/attr/' + name + '.txt', 'w')
        f.write('Listed only attributes that had a name.\n\n')
        for attr in attributes:
            if attr.name.strip():
                f.write(attr.name + '\n')
        f.close()
    except AttributeError:
        print 'Could not find attributes for ' + str(o)

def docs_create_folders():
    folders = ['help/docs/', 'help/dir/', 'help/attr/']
    for folder in folders:
        if not os.path.exists(folder):
            os.makedirs(folder)

def motion_editor_refresh():
    n =  sfmApp.GetHeadTimeInSeconds()
    sfmApp.SetHeadTimeInSeconds(-2)
    sfmApp.SetHeadTimeInSeconds(n)

def set_override_materials(override=True, jump=False):
    """Toggle override materials for current animation set
    by emulating clicking on "Add / Remove Override Materials" menu button"""
    qApp = PySide.QtGui.QApplication.instance()
    top = qApp.topLevelWidgets()
    override_status = 'Add Override Materials' if override else 'Remove Override Materials'
    for widget in top:
        if isinstance(widget, PySide.QtGui.QMenu):
            try:
                actions = widget.actions()
                override_action = None
                jump_to_ev_action = None
                for action in actions:

                    if action.text() == 'Show in Element Viewer':
                        jump_to_ev_action = action.menu().actions()[1]

                    if action.text() == override_status:
                        override_action = action

                if override_action:
                    override_action.trigger()

                if jump and jump_to_ev_action:
                    jump_to_ev_action.trigger()

            except RuntimeError:
                pass

def debug_breakpoint(*kwargs):
    """Usable as a breakpoint for debugging animation set and dag scripts
    via external debugger - for example Wing IDE (can't recommend it enough).
    More on SFM scripts debugging: https://wingware.com/doc/howtos/sfm
    """
    sfmApp.ProcessEvents()

def main():
    # Типы скриптов:
    #scripts\sfm\..
    # global - mainmenu
    # animation set context menu - animset
    # dag context menu - dag
    # during sfm initialization - sfm_init.py


    # shot = sfm.GetCurrentShot()
    # camera = shot.camera
    # animset = shot.animationSets[0]
    # controls = кости


    animSet = sfm.GetCurrentAnimationSet()
    gameModel = animSet.gameModel
    rootGroup = animSet.GetRootControlGroup()
    # ControlGroupName = 'newControlName'
    # controlGroup = animSet.FindOrAddControlGroup(animSet.GetRootControlGroup(), 'newControlName')
    # print(controlGroup)

    materials_dict = dict()

    # for material in gameModel.materials:
    #   materials_dict = 

    for material in gameModel.materials:
        value = 'xxxxx'
        if not material.HasAttribute('$cloakcolortint'):
            continue
            
        print material.name
        print material.GetValue('$cloakcolortint')
        print type(material.GetValue('$cloakcolortint'))

    # newMat = vs.CreateElement('DmeMaterial', 'proxy script base', 0)
    # newMat.AddAttributeAsString('$basetexture')#, 'test')
    # newMat.SetValue('$basetexture', 'fake')
    # newMat.SetValue('mtlName', 'mtldef') #set  mtlName, critical step
    # animSet.gameModel.materials.AddToTail(newMat) #add material to model


    # print animSet.CollectDagNodes()
    # print animSet.CollectOperators()

if __name__ == '__main__':
    main()